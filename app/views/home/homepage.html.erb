<html>
	<head>
		<title>My first Three.js app</title>
		
		
		
	</head>
	
	<body>
		<div class="header">
			<h1>Rubik's Cube App</h1>
			<div class="nav"> <a href="#">home</a> <a href="#">about</a> <a href="#">design</a> <a href="#">info</a> <a href="#">contact</a> </div>
		</div>
		
		
		<script src="/assets/three.min.js"></script>
		<script src="/assets/OrbitControls.js"></script>
		<script>
			
			var frontFace = [0,1,2,3,4,5,6,7,8];
			var backFace = [18,19,20,21,22,23,24,25,26];
			var leftFace = [0,3,6,9,12,15,18,21,24];
			var rightFace = [2,5,8,11,14,17,20,23,26];
			var upFace = [0,1,2,9,10,11,18,19,20];
			var downFace = [6,7,8,15,16,17,24,25,26];
			var mSlice = [1,4,7,10,13,16,19,22,25];
			var eSlice = [3,4,5,12,13,14,21,22,23];
			var sSlice = [9,12,15,10,13,16,11,14,17];
			
			var frontRotatedC = [6,3,0,7,4,1,8,5,2];
			var backRotatedC = [20,23,26,19,22,25,18,21,24];
			var leftRotatedC = [18,9,0,21,12,3,24,15,6]; 
			var rightRotatedC = [8,17,26,5,14,23,2,11,20]; 
			var upRotatedC = [2,11,20,1,10,19,0,9,18];
			var downRotatedC = [24,15,6,25,16,7,26,17,8];
			var mRotatedC = [19,10,1,22,13,4,25,16,7];
			var eRotatedC = [21,12,3,22,13,4,23,14,5];
			var sRotatedC = [15,16,17,12,13,14,9,10,11];
			
			var frontRotatedCC = [2,5,8,1,4,7,0,3,6]; 
			var backRotatedCC = [24,21,18,25,22,19,26,23,20]; 
			var leftRotatedCC = [6,15,24,3,12,21,0,9,18]; 
			var rightRotatedCC = [20,11,2,23,14,5,26,17,8];
			var upRotatedCC = [18,9,0,19,10,1,20,11,2];
			var downRotatedCC = [8,17,26,7,16,25,6,15,24];
			var mRotatedCC = [7,16,25,4,13,22,1,10,19];
			var eRotatedCC = [5,14,23,4,13,22,3,12,21];
			var sRotatedCC = [11,10,9,14,13,12,17,16,15];
			
			var scene = new THREE.Scene();
			var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );
			camera.position.z = 4;
			camera.position.y = 4;
			camera.position.x = 4;
			var controls;
			
			var moveSet = [];
			var currentAlgorithm = "";
			var currentMoveIndex = 0;
			var animationDir = true;
			var doubleMove = false;
			
			var renderer = new THREE.WebGLRenderer();
			renderer.setClearColor( 0xffffff);
			renderer.setSize( window.innerWidth/2, window.innerHeight/2 );
			document.body.appendChild( renderer.domElement );

			var geometrys = [];
			var materials = [];
			var cubeMaterials = [];
			var cubes = [];
			var textures = [];
			var animating = false;
			
			var textureLoader = new THREE.TextureLoader;
			
			textureLoader.load("assets/red.png", function (texture) {
				textures[0] = texture; 
				initScene();
			});
			
			textureLoader.load("assets/orange.png", function (texture) {
				textures[1] = texture; 
				initScene();
			});
			
			textureLoader.load("assets/green.png", function (texture) {
				textures[4] = texture; 
				initScene();
			});
			
			textureLoader.load("assets/blue.png", function (texture) {
				textures[5] = texture; 
				initScene();
			});
			
			textureLoader.load("assets/yellow.png", function (texture) {
				textures[3] = texture; 
				initScene();
			});
			
			textureLoader.load("assets/white.png", function (texture) {
				textures[2] = texture; 
				initScene();
			});
			
			textureLoader.load("assets/black.png", function (texture) {
				textures[6] = texture; 
				initScene();
			});
			
			var resetCamera = function()
			{
				camera.position.z = 4;
				camera.position.y = 4;
				camera.position.x = 4;
			}
			
			var initScene = function()
			{
				scene = new THREE.Scene();
				currentAlgorithm = null;
				try
				{
					for (i = 0; i < 7; i++)
					{
						textures[i].anisotropy = renderer.getMaxAnisotropy();
						textures[i].magFilter = THREE.NearestFilter;
						textures[i].minFilter = THREE.LinearMipMapLinearFilter;
					}
				}
				catch (error)
				{
					//If it's not a type error, rethrow it. Otherwise just return and wait for the textures to all load
					if (!(error instanceof TypeError))
					{
						throw error;
					}
					else
					{
						return;
					}
				}
				
				for (i = 0; i < 27; i++)
				{
					//Make 27 unit cubes
					geometrys[i] = new THREE.BoxGeometry( 1.0, 1.0, 1.0 );
					
				}
				
				makeMaterials();
				colorCubes();
				
				//Front Face
				for (i = 0; i < 9; i++)
				{
					geometrys[i].translate(0,0,1);
				}
				
				//Back Face
				for (i = 18; i < 27; i++)
				{
					geometrys[i].translate(0,0,-1);
				}
				
				//Left Face
				for(i = 0; i < 27; i += 3)
				{
					geometrys[i].translate(-1,0,0);
				}
				
				//Right Face
				for(i = 2; i < 27; i+= 3)
				{
					geometrys[i].translate(1,0,0);
					//materials[i] = new THREE.MeshBasicMaterial( {map: textures[0]});
				}
				
				//Up Face
				for(i =0; i < 21; i++)
				{
					if ( i == 3) 
					{
						i = 9;
					}
					if ( i == 12)
					{
						i = 18;
					}
					geometrys[i].translate(0,1,0);
				}
				
				//Down Face
				for(i =6; i < 27; i++)
				{
					if ( i == 9) 
					{
						i = 15;
					}
					if ( i == 18)
					{
						i = 24;
					}
					geometrys[i].translate(0,-1,0);
				}
				
				
				for (i = 0; i < 27; i++)
				{
					cubes[i] = new THREE.Mesh( geometrys[i], cubeMaterials[i] );
					scene.add( cubes[i] );
				}
				
				// Add OrbitControls so that we can zoom and rotate with the mouse. <-- new
      			controls = new THREE.OrbitControls(camera, renderer.domElement);
				
				currentAlgorithm = "";
				currentMoveIndex = 0;
				
			}
			
			var makeMaterials = function()
			{
				for(i = 0; i < 7; i++)
				{
					materials[i] = new THREE.MeshBasicMaterial({map: textures[i]});
				}
			}
			
			var colorCubes = function()
			{
				for (i= 0; i < 27; i++)
				{
					cubeMaterials[i] = new THREE.MeshFaceMaterial( [materials[0], materials[1], materials[2], materials[3], materials[4], materials[5]] );
				}
			}
			
			var placeCubes = function() 
			{
				
			}
			
			
			function move(rotate, rotating, axis, directionToRotate)
			{
				this.faceToRotate = rotate;
				this.rotatedFace = rotating;
				this.axisToRotate = axis;
				this.direction = directionToRotate;
			}
			
			initScene();
			
			var render = function () 
			{
				requestAnimationFrame( render );
				var finished = false;
				if (animating)
				{
					var executingMove = 0;
					while(moveSet[executingMove] != null)
					{
						if(executeMove(moveSet[executingMove]))
						{
							finished = true;	
						}
						executingMove++;
					}
					if (finished && !(doubleMove))
					{
						console.log(!(doubleMove))
						animating = false;
					}
					else if (finished)
					{
						doubleMove = false;
					}
				}
				renderer.render(scene, camera);
				//orbit control update on render
				controls.update();
			};
			
			var executeMove = function(moveToExecute)
			{
				if(moveToExecute.axisToRotate == 0)
				{
					for (i = 0; i < 9; i++)
					{
						cubes[moveToExecute.faceToRotate[i]].rotation.x += moveToExecute.direction * 0.01;
					}
					//1.565 = ~PI/2
					if (cubes[moveToExecute.faceToRotate[0]].rotation.x >= 1.565 || cubes[moveToExecute.faceToRotate[0]].rotation.x <= -1.565)
					{
						for (i = 0; i < 9; i++)
						{
							cubes[moveToExecute.faceToRotate[i]].geometry.applyMatrix( new THREE.Matrix4().makeRotationX(moveToExecute.direction * Math.PI/2));
						}
						reassignCubes(moveToExecute.faceToRotate, moveToExecute.rotatedFace);
						return true;
					}
				}
				else if(moveToExecute.axisToRotate == 1)
				{
					for (i = 0; i < 9; i++)
					{
						cubes[moveToExecute.faceToRotate[i]].rotation.y += moveToExecute.direction * 0.01;
					}
					if (cubes[moveToExecute.faceToRotate[0]].rotation.y >= 1.565 || cubes[moveToExecute.faceToRotate[0]].rotation.y <= -1.565)
					{
						for (i = 0; i < 9; i++)
						{
							cubes[moveToExecute.faceToRotate[i]].geometry.applyMatrix( new THREE.Matrix4().makeRotationY(moveToExecute.direction * Math.PI/2));
						}
						reassignCubes(moveToExecute.faceToRotate, moveToExecute.rotatedFace);
						return true;
					}
				}
				else if(moveToExecute.axisToRotate == 2)
				{ //f and b for z
					for (i = 0; i < 9; i++)
					{
						cubes[moveToExecute.faceToRotate[i]].rotation.z += moveToExecute.direction * 0.01;
					}
					if (cubes[moveToExecute.faceToRotate[0]].rotation.z >= 1.565 || cubes[moveToExecute.faceToRotate[0]].rotation.z <= -1.565)
					{
						for (i = 0; i < 9; i++)
						{
							cubes[moveToExecute.faceToRotate[i]].geometry.applyMatrix( new THREE.Matrix4().makeRotationZ(moveToExecute.direction * Math.PI/2));
						}
						reassignCubes(moveToExecute.faceToRotate, moveToExecute.rotatedFace);
						return true;
					}
				}
				return false;
			}
			
			var reassignCubes = function(rotating, rotated)
			{
				var cubesReferences = [];
				
				for (i = 0; i < 9; i++)
				{
					cubesReferences[i] = cubes[rotated[i]];
				}
				for (i = 0; i < 9; i++)
				{
					//cubes[faceToRotate[i]].geometry.applyMatrix( cubes[faceToRotate[i]].matrix );
					cubes[rotating[i]].rotation.set( 0, 0, 0 );
					cubes[rotating[i]].updateMatrix();
					cubes[rotating[i]] = cubesReferences[i];
				}
			}
			
			var forward = function()
			{
				if(!animating)
				{
					moveSet = [];
					var direction = 1;
					if (!currentAlgorithm)
					{
						document.getElementById("algorithmOutput").innerHTML = "No algorithm entered";
						return;
					}
					
					if (currentMoveIndex < currentAlgorithm.length)
					{
						if(currentMoveIndex < currentAlgorithm.length - 1 && currentAlgorithm[currentMoveIndex + 1] == "'")
						{
							direction = -1;
						}
						if(currentAlgorithm[currentMoveIndex] == "X" || currentAlgorithm[currentMoveIndex] == "Y" || currentAlgorithm[currentMoveIndex] == "Z")
						{
							//do the cube rotations here
						}
						moveSet[0] = setupMove(currentAlgorithm[currentMoveIndex].toUpperCase(), direction);
						if (moveSet[0] == null)
						{
							document.getElementById("moveOutput").innerHTML = currentAlgorithm[currentMoveIndex] + " is not a valid move";
							return;
						}
						
						if (currentAlgorithm[currentMoveIndex].toLowerCase() == currentAlgorithm[currentMoveIndex])
						{
							moveSet[1] = setupWedgeMove(currentAlgorithm[currentMoveIndex].toUpperCase(), direction);
						}
						
						
						if(currentMoveIndex < currentAlgorithm.length - 1 && currentAlgorithm[currentMoveIndex + 1] == "2")
						{
							doubleMove = true;
						}
						
						currentMoveIndex++;
						if (currentMoveIndex < currentAlgorithm.length && (currentAlgorithm[currentMoveIndex] == "'" || currentAlgorithm[currentMoveIndex] == "2"))
						{
							currentMoveIndex++;
						}
					}
					else
					{
						document.getElementById("moveOutput").innerHTML = "Algorithm Finished";
						return;
					}
					animating = true;
				}
			}
			
			var backward = function()
			{
				if(!animating)
				{
					moveSet = [];
					var direction = -1;
					if (!currentAlgorithm)
					{
						document.getElementById("algorithmOutput").innerHTML = "No algorithm entered";
						return;
					}
					currentMoveIndex--;
					
					if (currentMoveIndex >= 0)
					{
						if(currentAlgorithm[currentMoveIndex] == "'")
						{
							direction = 1;
							currentMoveIndex--;
						}
						
						if(currentAlgorithm[currentMoveIndex] == "2")
						{
							doubleMove = true;
							currentMoveIndex--;
						}
						
						
						if(currentAlgorithm[currentMoveIndex] == "X" || currentAlgorithm[currentMoveIndex] == "Y" || currentAlgorithm[currentMoveIndex] == "Z")
						{
							//do the cube rotations here
						}
						moveSet[0] = setupMove(currentAlgorithm[currentMoveIndex].toUpperCase(), direction);
						if (moveSet[0] == null)
						{
							document.getElementById("moveOutput").innerHTML = currentAlgorithm[currentMoveIndex] + " is not a valid move";
							return;
						}
						
						if (currentAlgorithm[currentMoveIndex].toLowerCase() == currentAlgorithm[currentMoveIndex])
						{
							moveSet[1] = setupWedgeMove(currentAlgorithm[currentMoveIndex].toUpperCase(), direction);
						}
					}
					else
					{
						currentMoveIndex = 0;
						document.getElementById("moveOutput").innerHTML = "At Algorithm Start";
						return;
					}
					animating = true;
				}
			}
			
			var enterAlgorithm = function()
			{
				var algorithm = document.getElementById("algorithm").value;
				document.getElementById("algorithmOutput").innerHTML = algorithm;
				document.getElementById("moveOutput").innerHTML = "At Algorithm Start";
				currentAlgorithm = algorithm;
				currentMoveIndex = 0;
			}
			
			//Condition, direction must be 1 or -1
			//Returns an appropriately setup move for the given notation and direction
			var setupMove = function(moveNotation, direction)
			{
				if(direction == 1)
				{
					return setupForwardMove(moveNotation);
				}
				else if(direction == -1)
				{
					return setupBackwardMove(moveNotation);
				}
			}
			
			var setupWedgeMove = function(moveNotation, direction)
			{
				var functionDirection;
				if (direction == 1)
				{
					functionDirection = setupForwardMove;
				}
				else if (direction == -1)
				{
					functionDirection = setupBackwardMove;
				}
				switch (moveNotation)
				{
					case "L":
						return functionDirection("M");
					case "F":
						return functionDirection("S");
					case "D":
						return functionDirection("E");
				}
				//These directions are reversed from the others
				if (direction == 1)
				{
					functionDirection = setupBackwardMove;
				}
				else if (direction == -1)
				{
					functionDirection = setupForwardMove;
				}
				switch (moveNotation)
				{
					case "R":
						return functionDirection("M");
					case "B":
						return functionDirection("S");
					case "U":
						return functionDirection("E");
				}
			}
			
			
			var setupBackwardMove = function(moveNotation)
			{
				var direction = -1;
				var faceToRotate;
				var axisToRotate;
				var rotatedFace;
				
				switch (moveNotation)
				{
					case "R":
						faceToRotate = rightFace;
						axisToRotate = 0;
						rotatedFace = rightRotatedCC;
						direction *= -1;
						break;
					case "L":
						faceToRotate = leftFace;
						axisToRotate = 0;
						rotatedFace = leftRotatedCC;
						break;
					case "U":
						faceToRotate = upFace;
						axisToRotate = 1;
						rotatedFace = upRotatedCC;
						direction *= -1;
						break;
					case "D":
						faceToRotate = downFace;
						axisToRotate = 1;
						rotatedFace = downRotatedCC;
						break;
					case "F":
						faceToRotate = frontFace;
						axisToRotate = 2;
						rotatedFace = frontRotatedCC;
						direction *= -1;
						break;
					case "B":
						faceToRotate = backFace;
						axisToRotate = 2;
						rotatedFace = backRotatedCC;
						break;
					case "M":
						faceToRotate = mSlice;
						axisToRotate = 0;
						rotatedFace = mRotatedCC;
						break;
					case "S":
						direction *= -1;
						faceToRotate = sSlice;
						axisToRotate = 2;
						rotatedFace = sRotatedCC;
						break;
					case "E":
						faceToRotate = eSlice;
						axisToRotate = 1;
						rotatedFace = eRotatedCC;
						break;
					default:
						return null;
				}
				return new move(faceToRotate, rotatedFace, axisToRotate, direction);
			}
			
			var setupForwardMove = function(moveNotation)
			{
				var direction = 1;
				var faceToRotate;
				var axisToRotate;
				var rotatedFace;
				
				switch (moveNotation)
				{
					case "R":
						faceToRotate = rightFace;
						axisToRotate = 0;
						rotatedFace = rightRotatedC;
						direction *= -1;
						break;
					case "L":
						faceToRotate = leftFace;
						axisToRotate = 0;
						rotatedFace = leftRotatedC;
						break;
					case "U":
						faceToRotate = upFace;
						axisToRotate = 1;
						rotatedFace = upRotatedC;
						direction *= -1;
						break;
					case "D":
						faceToRotate = downFace;
						axisToRotate = 1;
						rotatedFace = downRotatedC;
						break;
					case "F":
						faceToRotate = frontFace;
						axisToRotate = 2;
						rotatedFace = frontRotatedC;
						direction *= -1;
						break;
					case "B":
						faceToRotate = backFace;
						axisToRotate = 2;
						rotatedFace = backRotatedC;
						break;
					case "M":
						faceToRotate = mSlice;
						axisToRotate = 0;
						rotatedFace = mRotatedC;
						break;
					case "S":
						direction *= -1;
						faceToRotate = sSlice;
						axisToRotate = 2;
						rotatedFace = sRotatedC;
						break;
					case "E":
						faceToRotate = eSlice;
						axisToRotate = 1;
						rotatedFace = eRotatedC;
						break;
					default:
						return null;
				}
				return new move(faceToRotate, rotatedFace, axisToRotate, direction);
			}
			
			render();
		</script>
				<div class="instructions">
			<img src="/assets/instructionsvert.png" alt="Instructions on use vertical" style="width:75%;height:75%">
			
		</div>
		
		
		<div class="container">
		<input type="text" id="algorithm">
		<button onclick="enterAlgorithm()">Input Algorithm</button>
		<br>
		<button onclick="forward()" id= "Forward">Forward</button>
		<button onclick="backward()" id= "Backward">Backward</button>
		<br>
		<div>Current Algorithm</div><div id="algorithmOutput">No Algorithm</div>
		<div>Current Move: </div><div id="moveOutput">No Algorithm</div>
		<button onclick="initScene()">Reset Cube</button>
		<button onclick="resetCamera()">Reset Camera</button>
		
		<br>
		<br>
		
		<div class="footer">Copyright 2016  || <a href="http://www.cs.sfu.ca/CourseCentral/365/li/">Course Webpage</a></div>
		</div>
	</body>
</html>