<html>
	<head>
		<title>My first Three.js app</title>
		<style>
			body { margin: 0; }
			canvas { width: 50%; height: 50% }
		</style>
	</head>
	<p>HELLO</p>
	<body>
		<script src="/assets/three.min.js"></script>
		<script>
			var scene = new THREE.Scene();
			var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );

			var renderer = new THREE.WebGLRenderer();
			renderer.setSize( window.innerWidth/2, window.innerHeight/2 );
			document.body.appendChild( renderer.domElement );

			var geometrys = [];
			var materials = [];
			var cubes = [];
			var animating = false;
			
			var initScene = function()
			{
				scene = new THREE.Scene();
				
				for (i = 0; i < 27; i++)
				{
					//Make 27 cubes of size 0.95 units cubed
					geometrys[i] = new THREE.BoxGeometry( 0.95, 0.95, 0.95 );
					materials[i] = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );
					
				}
				
				for (i = 0; i < 27; i++)
				{
					for (j =0; j < 12; j++)
					{
						//Make the rest of the cube grey, for some reason setting the color of the material to grey made nothing render, so I colored each face grey
						geometrys[i].faces[j].color.setHex(0x777777);
					}
				}
				
				//Front Face
				for (i = 0; i < 9; i++)
				{
					geometrys[i].translate(0,0,1);
					geometrys[i].faces[8].color.setHex(0x00ff00);
					geometrys[i].faces[9].color.setHex(0x00ff00);
				}
				
				//Back Face
				for (i = 18; i < 27; i++)
				{
					geometrys[i].translate(0,0,-1);
					geometrys[i].faces[10].color.setHex(0x0000FF);
					geometrys[i].faces[11].color.setHex(0x0000FF);
				}
				
				//Left Face
				for(i = 0; i < 27; i += 3)
				{
					geometrys[i].translate(-1,0,0);
					geometrys[i].faces[2].color.setHex(0xFFA500);
					geometrys[i].faces[3].color.setHex(0xFFA500);
				}
				
				//Right Face
				for(i = 2; i < 27; i+= 3)
				{
					geometrys[i].translate(1,0,0);
					geometrys[i].faces[0].color.setHex(0xFF0000);
					geometrys[i].faces[1].color.setHex(0xFF0000);
				}
				
				//Up Face
				for(i =0; i < 21; i++)
				{
					if ( i == 3) 
					{
						i = 9;
					}
					if ( i == 12)
					{
						i = 18;
					}
					geometrys[i].translate(0,1,0);
					geometrys[i].faces[4].color.setHex(0xFFFFFF);
					geometrys[i].faces[5].color.setHex(0xFFFFFF);
				}
				
				//Down Face
				for(i =6; i < 27; i++)
				{
					if ( i == 9) 
					{
						i = 15;
					}
					if ( i == 18)
					{
						i = 24;
					}
					geometrys[i].translate(0,-1,0);
					geometrys[i].faces[6].color.setHex(0xFFFF00);
					geometrys[i].faces[7].color.setHex(0xFFFF00);
				}
				
				for (i = 0; i < 27; i++)
				{
					cubes[i] = new THREE.Mesh( geometrys[i], materials[i] );
					scene.add( cubes[i] );
				}
				
				camera.position.z = 4;
				camera.position.y = 4;
				camera.position.x = 4;
				camera.lookAt(new THREE.Vector3(0,0,0));
				
				currentAlgorithm = "";
				currentMove = 0;
			}
			
			var frontFace = [0,1,2,3,4,5,6,7,8];
			var backFace = [18,19,20,21,22,23,24,25,26];
			var leftFace = [0,3,6,9,12,15,18,21,24];
			var rightFace = [2,5,8,11,14,17,20,23,26];
			var upFace = [0,1,2,9,10,11,18,19,20];
			var downFace = [6,7,8,15,16,17,24,25,26];
			var mSlice = [1,4,7,10,13,16,19,22,25];
			var eSlice = [3,4,5,12,13,14,21,22,23];
			var sSlice = [9,12,15,10,13,16,11,14,17];
			
			var frontRotatedC = [6,3,0,7,4,1,8,5,2];
			var backRotatedC = [20,23,26,19,22,25,18,21,24];
			var leftRotatedC = [18,9,0,21,12,3,24,15,6]; 
			var rightRotatedC = [8,17,26,5,14,23,2,11,20]; 
			var upRotatedC = [2,11,20,1,10,19,0,9,18];
			var downRotatedC = [24,15,6,25,16,7,26,17,8];
			var mRotatedC = [1,4,7,10,13,16,19,22,25];
			var eRotatedC = [3,4,5,12,13,14,21,22,23];
			var sRotatedC = [9,12,15,10,13,16,11,14,17];
			
			var frontRotatedCC = [2,5,8,1,4,7,0,3,6]; 
			var backRotatedCC = [24,21,18,25,22,19,26,23,20]; 
			var leftRotatedCC = [6,15,24,3,12,21,0,9,18]; 
			var rightRotatedCC = [20,11,2,23,14,5,26,17,8];
			var upRotatedCC = [18,9,0,19,10,1,20,11,2];
			var downRotatedCC = [8,17,26,7,16,25,6,15,24];
			var mRotatedCC = [1,4,7,10,13,16,19,22,25];
			var eRotatedCC = [3,4,5,12,13,14,21,22,23];
			var sRotatedCC = [9,12,15,10,13,16,11,14,17];
			
			var faceToRotate = frontFace;
			var rotatedFace = frontRotatedCC;
			var axisToRotate = 0;
			var direction = 1;
			var currentAlgorithm = "";
			var currentMove = 0;
			var animationDir = true;
			
			initScene();
			
			var render = function () 
			{
				requestAnimationFrame( render );
				// L and R rotates with cubes[faceToRotate[i]].rotation.x   //L stops now
				// F and B rotates with cubes[faceToRotate[i]].rotation.z  // F stops first move
				// U and D rotates with cubes[faceToRotate[i]].rotation.y  // U stops first move
				if (animating)
				{
					if(axisToRotate == 0)
					{
						for (i = 0; i < 9; i++)
						{
							cubes[faceToRotate[i]].rotation.x += direction * 0.01;
						}
						//Math.PI is too precise for direct comparison, so check a range around PI/2 or 90 degrees (1.570796)
						if (cubes[faceToRotate[0]].rotation.x >= 1.565 || cubes[faceToRotate[0]].rotation.x <= -1.565)
						{
							for (i = 0; i < 9; i++)
							{
								cubes[faceToRotate[i]].geometry.applyMatrix( new THREE.Matrix4().makeRotationX(direction * Math.PI/2));
							}
							animating = false;
							reassignCubes();
						}
					}
					else if(axisToRotate == 1)
					{
						for (i = 0; i < 9; i++)
						{
							cubes[faceToRotate[i]].rotation.y += direction * 0.01;
						}
						//Math.PI is too precise for direct comparison, so check a range around PI/2 or 90 degrees (1.570796)
						if (cubes[faceToRotate[0]].rotation.y >= 1.565 || cubes[faceToRotate[0]].rotation.y <= -1.565)
						{
							for (i = 0; i < 9; i++)
							{
								cubes[faceToRotate[i]].geometry.applyMatrix( new THREE.Matrix4().makeRotationY(direction * Math.PI/2));
							}
							animating = false;
							reassignCubes();
						}
					}
					else if(axisToRotate == 2)
					{ //f and b for z
						for (i = 0; i < 9; i++)
						{
							cubes[faceToRotate[i]].rotation.z += direction * 0.01;
						}
						//Math.PI is too precise for direct comparison, so check a range around PI/2 or 90 degrees (1.570796)
						if (cubes[faceToRotate[0]].rotation.z >= 1.565 || cubes[faceToRotate[0]].rotation.z <= -1.565)
						{
							for (i = 0; i < 9; i++)
							{
								cubes[faceToRotate[i]].geometry.applyMatrix( new THREE.Matrix4().makeRotationZ(direction * Math.PI/2));
							}
							animating = false;
							reassignCubes();
						}
					}
					//If it hits here, something is wrong, so just stop animating!
					else
					{
						animating = false;
					}
				}
				renderer.render(scene, camera);
			};
			
			var reassignCubes = function()
			{
				var cubesReferences = [];
				
				for (i = 0; i < 9; i++)
				{
					cubesReferences[i] = cubes[rotatedFace[i]];
				}
				for (i = 0; i < 9; i++)
				{
					//cubes[faceToRotate[i]].geometry.applyMatrix( cubes[faceToRotate[i]].matrix );
					cubes[faceToRotate[i]].rotation.set( 0, 0, 0 );
					cubes[faceToRotate[i]].updateMatrix();
					cubes[faceToRotate[i]] = cubesReferences[i];
				}
			}
			
			var forward = function()
			{
				animationDir = true;
				animateStep();
			}
			
			var backward = function()
			{
				animationDir = false;
				animateStep();
			}
			
			var animateStep = function()
			{
				if(!animating)
				{
					animating = true;
					var algorithmOutput = document.getElementById("algorithm").value;
					
					if(!animationDir)
					{
						if (currentMove > 0)
						{
							currentMove--;
							//console.log(currentMove);
						}
						else
						{
							document.getElementById("algorithmOutput").innerHTML = "At Algorithm Start";
							animating = false;
							return;
						}
					}
					
					if (algorithmOutput != currentAlgorithm)
					{
						currentAlgorithm = algorithmOutput;
						currentMove = -1;
					}
					
					if( currentMove < currentAlgorithm.length - 1 && animationDir)
					{
						currentMove++;
						//console.log(currentMove);
					}
					else if (animationDir)
					{
						currentMove = -1;
						animating = false;
						document.getElementById("algorithmOutput").innerHTML = "Algorithm Finished";
						return;
					}
					direction = 1;
					switch (currentAlgorithm[currentMove])
					{
						case "R":
							faceToRotate = rightFace;
							axisToRotate = 0;
							rotatedFace = rightRotatedC;
							direction *= -1;
							break;
						case "L":
							faceToRotate = leftFace;
							axisToRotate = 0;
							rotatedFace = leftRotatedC;
							break;
						case "U":
							faceToRotate = upFace;
							axisToRotate = 1;
							rotatedFace = upRotatedC;
							direction *= -1;
							break;
						case "D":
							faceToRotate = downFace;
							axisToRotate = 1;
							rotatedFace = downRotatedC;
							break;
						case "F":
							faceToRotate = frontFace;
							axisToRotate = 2;
							rotatedFace = frontRotatedC;
							direction *= -1;
							break;
						case "B":
							faceToRotate = backFace;
							axisToRotate = 2;
							rotatedFace = backRotatedC;
							break;
						case "M":
							faceToRotate = mSlice;
							axisToRotate = 0;
							rotatedFace = mRotatedC;
							break;
						case "S":
							faceToRotate = sSlice;
							axisToRotate = 2;
							rotatedFace = sRotatedC;
							break;
						case "E":
							faceToRotate = eSlice;
							axisToRotate = 1;
							rotatedFace = eRotatedC;
							break;
						default:
							document.getElementById("algorithmOutput").innerHTML = algorithmOutput[currentMove] + " is an invalid move.";
							animating = false;
							return;
							
					}
					var lastMove = "";
					if (currentMove < currentAlgorithm.length)
					{
						if(currentAlgorithm[currentMove + 1] == "'")
						{
							direction = direction * -1;
							lastMove = currentAlgorithm[currentMove];
							switch(currentAlgorithm[currentMove])
							{
								case "R":
									rotatedFace = rightRotatedCC;
									break;
								case "L":
									rotatedFace = leftRotatedCC;
									break;
								case "F":
									rotatedFace =frontRotatedCC;
									break;
								case "B":
									rotatedFace = backRotatedCC;
									break;
								case "U":
									rotatedFace = upRotatedCC;
									break;
								case "D":
									rotatedFace = downRotatedCC;
									break;
							}
							currentMove++;
						}
						else if (currentAlgorithm[currentMove+ 1] == "w")
						{
							//Specify it's a  wedge move here, once I've figured out how to do wedge moves
							currentMove++;
						}
						else
						{
							lastMove = "";
						}
					}
				}
				document.getElementById("algorithmOutput").innerHTML = lastMove + algorithmOutput[currentMove];
			}	

			render();
		</script>
		<br></br>
		<input type="text" id="algorithm">
		<button onclick="forward()" id= "Forward">Forward</button>
		<button onclick="backward()" id= "Backward">Backward</button>
		<br>
		<div>Current Move: </div><div id="algorithmOutput">No Algorithm</div>
		<button onclick="initScene()">Reset</button>
	</body>
</html>